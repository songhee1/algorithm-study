import java.io.*;
import java.lang.reflect.Array;
import java.sql.Time;
import java.util.*;
class Main {
	static class Cheese{
		int x;
		int y;
		Cheese(int x, int y){
			this.x=x;
			this.y=y;
		}
	}
  
	static StringBuilder sb = new StringBuilder();
	static int N, M, time;
	static int arr[][], visit[][], dx[] = {1,0,-1,0}, dy[] = {0,1,0,-1};
	static boolean visited[][];
	static List<Cheese> list;
	public static void main(String[] args) throws IOException {
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    	StringTokenizer st = new StringTokenizer(br.readLine());
    	N = Integer.parseInt(st.nextToken());
    	M = Integer.parseInt(st.nextToken());
    	
    	arr = new int[N][M];
    	for(int i=0;i<N;i++) {
    		st = new StringTokenizer(br.readLine());
    		for(int j=0;j<M;j++) {
    			arr[i][j] = Integer.parseInt(st.nextToken());
    		}
    	}
    	
    	AirCheese();
    	System.out.println(time);
    	System.out.println(list.size());
	}
	private static void AirCheese() {
		while(hasCheese()) {
			list = new ArrayList<>();
			visited = new boolean[N][M];
			
			bfs(0,0);
			
			for(Cheese ch : list) {
				arr[ch.x][ch.y] = 0;
			}
			time++;
		}
	}
	private static void bfs(int i, int j) {
		Queue<Cheese> q = new LinkedList<>();
		q.add(new Cheese(i, j));
		visited[i][j] = true;
		
		while(!q.isEmpty()) {
			Cheese now = q.poll();
			for(int dir = 0;dir<dx.length;dir++) {
				int nx = now.x+dx[dir];
				int ny = now.y+dy[dir];
				if(nx<0||nx>=N || ny<0||ny>=M) continue;
				if(arr[nx][ny] == 1 && visited[nx][ny] == false) {
					list.add(new Cheese(nx, ny));
					visited[nx][ny] = true;
				}else if(arr[nx][ny] == 0 && visited[nx][ny] == false){
					visited[nx][ny] = true;
					q.add(new Cheese(nx, ny));
				}
			}
		}
	}
	private static boolean hasCheese() {
		for(int i=0;i<N;i++) {
			for(int j=0;j<M;j++) {
				if(arr[i][j] != 0) {
					return true;
				}
			}
		}
		return false;
	}
	
}
